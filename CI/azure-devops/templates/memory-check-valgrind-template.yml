parameters:
# [Required] Job name
  name: ''
# [Required] Build agent name
  image: ''
# [Required] VCPKG triplet
  vcpkgTriplet: ''
# [Optional] CMake additional arguments for CMake generate mode
  cmakeGenArgs: ''
# [Optional] Build directory
  buildDirectory: 'build'

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.image }}
  variables:
    vcpkgDir: '$(Pipeline.Workspace)/vcpkg'
    installDir: '$(Build.ArtifactStagingDirectory)/install/bitserializer-$(Build.SourceBranchName)'
    acceptanceTestsDir: '$(Build.SourcesDirectory)/tests/acceptance_tests'

  steps:
  - script: |
      echo --- Install build tools ---
      sudo apt-get install ninja-build valgrind
    displayName: 'Install build tools'

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Tools version info
      echo ------------------------------------------------------------------------------
      cmake --version
      ninja --version
      valgrind --version
    displayName: 'Tools version info'

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Clone latest VCPKG
      echo ------------------------------------------------------------------------------
      git clone -v "https://github.com/Microsoft/vcpkg.git" "${{ variables.vcpkgDir }}"
      echo
      echo ------------------------------------------------------------------------------
      echo -- Bootstrap VCPKG
      echo ------------------------------------------------------------------------------
      ${{ variables.vcpkgDir }}/bootstrap-vcpkg.sh
    displayName: 'Install VCPKG'

  - task: Cache@2
    inputs:
      key: |
        vcpkg | v8 | ${{ parameters.name }} | $(Build.SourcesDirectory)/vcpkg.json
      restoreKeys: |
        vcpkg | v8 | ${{ parameters.name }}
      path: ${{ parameters.buildDirectory }}/vcpkg_installed/
      cacheHitVar: VCPKG_CACHE_RESTORED
    displayName: Configure cache of VCPKG packages

  - task: CMake@1
    inputs:
      workingDirectory: ${{ parameters.buildDirectory }}
      cmakeArgs: '-GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DCMAKE_INSTALL_PREFIX:PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }} ..'
    displayName: 'CMake - generate'

  - script: |
      ninja install -C ${{ parameters.buildDirectory }}
    displayName: 'Build and install'

  - task: CMake@1
    inputs:
      workingDirectory: ${{ variables.acceptanceTestsDir }}/build-debug
      cmakeArgs: '-GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DVCPKG_MANIFEST_DIR=$(Build.SourcesDirectory) -DCMAKE_PREFIX_PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }} ..'
    displayName: 'CMake - generate acceptance tests'

  - script: |
      ninja -C ${{ variables.acceptanceTestsDir }}/build-debug
    displayName: 'Build acceptance tests'

  - script: |
      cd ${{ variables.acceptanceTestsDir }}/build-debug
      ctest -T memcheck -L integration_tests --output-on-failure -j$(nproc) --overwrite MemoryCheckCommandOptions="--leak-check=full --error-exitcode=1"
      exit_code=$?
      echo "CTest exited with code: $exit_code"
      echo

      # Check for Valgrind errors in logs
      cd Testing/Temporary
      has_errors=0
      for logfile in MemoryChecker*.log; do
        if [ -s "$logfile" ] && ! grep -q "ERROR SUMMARY: 0" "$logfile"; then
          echo "##vso[task.logissue type=error]Valgrind errors in $logfile"
          echo
          echo ------------------------------------------------------------------------------
          echo "❗ VALGRIND ERRORS ❗"
          echo ------------------------------------------------------------------------------
          cat "$logfile"
          echo ------------------------------------------------------------------------------
          has_errors=1
        fi
      done

      # Fail the pipeline if errors are found
      if [ $has_errors -ne 0 ]; then
        echo "##vso[task.logissue type=error]Valgrind detected memory errors."
        exit 1  # Force pipeline failure
      elif [ $exit_code -ne 0 ]; then
        echo "##vso[task.logissue type=error]CTest failed with exit code $exit_code"
        exit $exit_code  # Propagate CTest exit code
      fi
    displayName: 'Memory check'
