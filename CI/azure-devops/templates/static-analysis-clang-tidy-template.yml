parameters:
# [Required] Job name
  name: ''
# [Required] Build agent name
  image: ''
# [Required] VCPKG triplet
  vcpkgTriplet: ''
# [Optional] Cmake additional arguments for CMake generate mode
  cmakeGenArgs: ''
# [Optional] Full analysis or just changes from last commit
  fullAnalysis: true
# [Optional] Build directory
  buildDirectory: 'build'

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.image }}
  variables:
    vcpkgDir: '$(Pipeline.Workspace)/vcpkg'

  steps:
  - checkout: self
    fetchDepth: 2

  - script: |
      echo --- Install build tools ---
      sudo apt-get install ninja-build
    displayName: 'Install build tools'

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Tools version info
      echo ------------------------------------------------------------------------------
      cmake --version
      ninja --version
      clang-tidy --version
    displayName: 'Tools version info'

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Clone latest VCPKG
      echo ------------------------------------------------------------------------------
      git clone -v "https://github.com/Microsoft/vcpkg.git" "${{ variables.vcpkgDir }}"
      echo
      echo ------------------------------------------------------------------------------
      echo -- Bootstrap VCPKG
      echo ------------------------------------------------------------------------------
      ${{ variables.vcpkgDir }}/bootstrap-vcpkg.sh
    displayName: 'Install VCPKG'

  - task: Cache@2
    inputs:
      key: |
        vcpkg | v8 | ${{ parameters.name }} | $(Build.SourcesDirectory)/vcpkg.json
      restoreKeys: |
        vcpkg | v8 | ${{ parameters.name }}
      path: ${{ parameters.buildDirectory }}/vcpkg_installed/
      cacheHitVar: VCPKG_CACHE_RESTORED
    displayName: Configure cache of VCPKG packages

  - task: CMake@1
    inputs:
      workingDirectory: ${{ parameters.buildDirectory }}
      cmakeArgs: '${{ parameters.cmakeGenArgs }} -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/../vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} .. -G Ninja'
    displayName: 'Cmake - generate'

  - script: |
      ninja -C ${{ parameters.buildDirectory }}
      ninja -C ${{ parameters.buildDirectory }} -t deps > ${{ parameters.buildDirectory }}/deps.txt
    displayName: 'Build'
    condition: and(succeeded(), eq('${{ parameters.fullAnalysis }}', false))

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Identifying affected source files
      echo ------------------------------------------------------------------------------
      git diff HEAD HEAD~ --name-only > ${{ parameters.buildDirectory }}/changed_files.txt
      python tools/static_analysis/find_affected_files.py ${{ parameters.buildDirectory }}/deps.txt ${{ parameters.buildDirectory }}/changed_files.txt ${{ parameters.buildDirectory }}/affected_sources.txt
      affected_sources=$(cat ${{ parameters.buildDirectory }}/affected_sources.txt)
      if [ -n "$affected_sources" ]; then
          echo
          echo $affected_sources
          echo
          echo ------------------------------------------------------------------------------
          echo -- Ð¡lang-tidy analysis
          echo ------------------------------------------------------------------------------
          python ./tools/static_analysis/clang-tidy/run-clang-tidy.py -config-file=".clang-tidy" -p ${{ parameters.buildDirectory }} $affected_sources
      else
          echo "No affected source files found. Skipping clang-tidy analysis."
      fi
    displayName: 'Static analysis [latest changes]'
    condition: and(succeeded(), eq('${{ parameters.fullAnalysis }}', false))

  - script: |
      python ./tools/static_analysis/clang-tidy/run-clang-tidy.py -config-file=".clang-tidy" -p ${{ parameters.buildDirectory }}
      EXIT_CODE=$?
      if [ $EXIT_CODE -ne 0 ]; then
          echo "##vso[task.logissue type=warning]Warnings or errors were found during clang-tidy analysis."
          echo "##vso[task.complete result=SucceededWithIssues;]Pipeline marked as partially succeeded due to clang-tidy warnings."
      fi
    continueOnError: true
    displayName: 'Static analysis [full]'
    condition: and(succeeded(), eq('${{ parameters.fullAnalysis }}', true))
