parameters:
# [Required] Job name
  name: ''
# [Required] Build agent name
  image: ''
# [Required] VCPKG triplet
  vcpkgTriplet: ''
# [Optional] Install additional tools command line
  installToolsCmd: ''
# [Optional] URL to download the compiler
  compilerUrl: ''
# [Optional] Cmake additional arguments for CMake generate mode
  cmakeGenArgs: ''
# [Optional] Enable run tests
  enableRunTests: true
# [Optional] Package suffix
  packageSuffix: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.image }}
  variables:
    vcpkgDir: '$(Pipeline.Workspace)/vcpkg'
    installDir: '$(Build.ArtifactStagingDirectory)/install/bitserializer-$(Build.SourceBranchName)'
    archiveFilePath: '$(Build.ArtifactStagingDirectory)/install/bitserializer_$(Build.SourceBranchName)${{ parameters.packageSuffix }}.tar.gz'
    acceptanceTestsDir: '$(Build.SourcesDirectory)/tests/acceptance_tests'

  steps:
  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Install build tools
      echo ------------------------------------------------------------------------------
      ${{ parameters.installToolsCmd }}
    displayName: 'Install build tools'
    condition: ne('${{ parameters.installToolsCmd }}', '')

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Download compiler
      echo ------------------------------------------------------------------------------
      wget -nv ${{ parameters.compilerUrl }} -O compiler.tar.xz
      echo
      echo ------------------------------------------------------------------------------
      echo -- Extract compiler
      echo ------------------------------------------------------------------------------
      sudo tar -xf compiler.tar.xz -C /usr/
    displayName: 'Install compiler'
    condition: ne('${{ parameters.compilerUrl }}', '')

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Clone latest VCPKG
      echo ------------------------------------------------------------------------------
      git clone -v "https://github.com/microsoft/vcpkg.git" "${{ variables.vcpkgDir }}"
      echo
      echo ------------------------------------------------------------------------------
      echo -- Bootstrap VCPKG
      echo ------------------------------------------------------------------------------
      ${{ variables.vcpkgDir }}/bootstrap-vcpkg.sh
    displayName: 'Install VCPKG'

  - task: CMake@1
    inputs:
      workingDirectory: 'build-debug'
      cmakeArgs: '-GNinja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DCMAKE_INSTALL_PREFIX:PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }} ..'
    displayName: 'Cmake - generate debug'

  - task: CMake@1
    inputs:
      workingDirectory: 'build-release'
      cmakeArgs: '-GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DCMAKE_INSTALL_PREFIX:PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }} ..'
    displayName: 'Cmake - generate release'

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Build and install library [Debug]
      echo ------------------------------------------------------------------------------
      ninja install -C build-debug
      echo
      echo ------------------------------------------------------------------------------
      echo -- Build and install library [Release]
      echo ------------------------------------------------------------------------------
      ninja install -C build-release
    displayName: 'Build and install'

  - script: |
      set -e
      echo ------------------------------------------------------------------------------
      echo -- Cmake: generate acceptance tests [debug]
      echo ------------------------------------------------------------------------------
      cd ${{ variables.acceptanceTestsDir }}
      cmake -GNinja -B build-debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DVCPKG_MANIFEST_DIR=$(Build.SourcesDirectory) -DCMAKE_PREFIX_PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }}
      echo
      echo ------------------------------------------------------------------------------
      echo -- Cmake: build acceptance tests [debug]
      echo ------------------------------------------------------------------------------
      ninja -C build-debug
    displayName: 'Build acceptance tests [Debug]'
    condition: and(succeeded(), eq('${{ parameters.enableRunTests }}', true))

  - script: |
      ctest --test-dir ${{ variables.acceptanceTestsDir }}/build-debug --output-on-failure -j$(nproc)
    displayName: 'Run acceptance tests [Debug]'
    condition: and(succeeded(), eq('${{ parameters.enableRunTests }}', true))
    
  - script: |
      set -e
      echo ------------------------------------------------------------------------------
      echo -- Cmake: generate acceptance tests [release]
      echo ------------------------------------------------------------------------------
      cd ${{ variables.acceptanceTestsDir }}
      cmake -GNinja -B build-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DVCPKG_MANIFEST_DIR=$(Build.SourcesDirectory) -DCMAKE_PREFIX_PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }}
      echo
      echo ------------------------------------------------------------------------------
      echo -- Cmake: build acceptance tests [release]
      echo ------------------------------------------------------------------------------
      ninja -C build-release
    displayName: 'Build acceptance tests [Release]'
    condition: and(succeeded(), eq('${{ parameters.enableRunTests }}', true))

  - script: |
      ctest --test-dir ${{ variables.acceptanceTestsDir }}/build-release --output-on-failure -j$(nproc)
    displayName: 'Run acceptance tests [Release]'
    condition: and(succeeded(), eq('${{ parameters.enableRunTests }}', true))

  - task: ArchiveFiles@2
    displayName: Zip package
    inputs:
      rootFolderOrFile: '${{ variables.installDir }}'
      archiveType: 'tar'
      tarCompression: 'gz'
      archiveFile: '${{ variables.archiveFilePath }}'
      replaceExistingArchive: true

  - task: GitHubRelease@1
    displayName: 'Publish package to GitHub'
    inputs:
      gitHubConnection: 'PavelKisliak'
      repositoryName: '$(Build.Repository.Name)'
      action: 'edit'
      isDraft: true
      target: '$(Build.SourceVersion)'
      tag: $(Build.SourceBranchName)
      tagSource: 'userSpecifiedTag'
      title: '$(Build.SourceBranchName)'
      addChangeLog: false
      assets: '${{ variables.archiveFilePath }}'
      assetUploadMode: 'replace'
