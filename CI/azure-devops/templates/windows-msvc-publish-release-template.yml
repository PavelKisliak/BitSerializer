parameters:
# [Required] Job name
  name: ''
# [Required] Build agent name
  image: ''
# [Optional] Platform [x64, x86]
  platform: 'x64'
# [Required] VCPKG triplet
  vcpkgTriplet: ''
# [Optional] CMake additional arguments for CMake generate mode
  cmakeGenArgs: ''
# [Optional] Enable run tests
  enableRunTests: true
# [Optional] Package suffix
  packageSuffix: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.image }}
  variables:
    vcpkgDir: '$(Pipeline.Workspace)/vcpkg'
    installDir: '$(Build.ArtifactStagingDirectory)/install/bitserializer-$(Build.SourceBranchName)'
    archiveFilePath: '$(Build.ArtifactStagingDirectory)/install/bitserializer_$(Build.SourceBranchName)${{ parameters.packageSuffix }}.tar.gz'
    acceptanceTestsDir: '$(Build.SourcesDirectory)/tests/acceptance_tests'

  steps:
  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Clone latest VCPKG
      echo ------------------------------------------------------------------------------
      git clone -v "https://github.com/Microsoft/vcpkg.git" "${{ variables.vcpkgDir }}"
      echo.
      echo ------------------------------------------------------------------------------
      echo -- Bootstrap VCPKG
      echo ------------------------------------------------------------------------------
      ${{ variables.vcpkgDir }}/bootstrap-vcpkg
    displayName: 'Install VCPKG'

  - script: |
      echo ------------------------------------------------------------------------------
      echo -- Locating Visual Studio installation
      echo ------------------------------------------------------------------------------
      vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath > vs_path.txt
      set /p VSINSTALLDIR=<vs_path.txt
      if not "%VSINSTALLDIR:~-1%"=="\" set "VSINSTALLDIR=%VSINSTALLDIR%\"
      if not exist "%VSINSTALLDIR%" (
        echo Visual Studio installation not found!
        exit 1
      )
      echo.
      echo ------------------------------------------------------------------------------
      echo -- Setting up ${{ parameters.platform }} build environment...
      echo ------------------------------------------------------------------------------
      echo "Setting up ${{ parameters.platform }} build environment..."
      call "%VSINSTALLDIR%VC\Auxiliary\Build\vcvarsall.bat" ${{ parameters.platform }}
      if %ERRORLEVEL% neq 0 (
        echo "Failed to configure MSVC environment. Exiting..."
        exit 1
      )
      echo MSVC environment configured successfully.
      echo.
      echo ------------------------------------------------------------------------------
      echo -- CMake: generate [Debug]
      echo ------------------------------------------------------------------------------
      cmake -GNinja -B build-debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DCMAKE_INSTALL_PREFIX:PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }}
      if %ERRORLEVEL% neq 0 (
        echo CMake configuration failed. Exiting...
        exit 1
      )
      echo.
      echo ------------------------------------------------------------------------------
      echo -- CMake: generate [Release]
      echo ------------------------------------------------------------------------------
      cmake -GNinja -B build-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DCMAKE_INSTALL_PREFIX:PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }}
      if %ERRORLEVEL% neq 0 (
        echo CMake configuration failed. Exiting...
        exit 1
      )
      echo.
      echo ------------------------------------------------------------------------------
      echo -- Build and install [Debug]
      echo ------------------------------------------------------------------------------
      ninja install -C build-debug
      if %ERRORLEVEL% neq 0 (
        echo Install failed. Exiting...
        exit 1
      )
      echo.
      echo ------------------------------------------------------------------------------
      echo -- Build and install [Release]
      echo ------------------------------------------------------------------------------
      ninja install -C build-release
      if %ERRORLEVEL% neq 0 (
        echo Install failed. Exiting...
        exit 1
      )
      echo.
      echo ------------------------------------------------------------------------------
      echo -- Build acceptance tests [Debug]
      echo ------------------------------------------------------------------------------
      cd ${{ variables.acceptanceTestsDir }}
      cmake -GNinja -B build-debug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DVCPKG_MANIFEST_DIR=$(Build.SourcesDirectory) -DCMAKE_PREFIX_PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }}
      ninja -C build-debug
      echo.
      echo ------------------------------------------------------------------------------
      echo -- Build acceptance tests [Release]
      echo ------------------------------------------------------------------------------
      cmake -GNinja -B build-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ variables.vcpkgDir }}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} -DVCPKG_MANIFEST_DIR=$(Build.SourcesDirectory) -DCMAKE_PREFIX_PATH=${{ variables.installDir }} ${{ parameters.cmakeGenArgs }}
      ninja -C build-release
    displayName: 'Build and install [${{ parameters.platform }}]'

  - script: |
      ctest --test-dir ${{ variables.acceptanceTestsDir }}/build-debug
    displayName: 'Run acceptance tests [Debug]'

  - script: |
      ctest --test-dir ${{ variables.acceptanceTestsDir }}/build-release
    displayName: 'Run acceptance tests [Release]'

  - task: ArchiveFiles@2
    displayName: Zip package
    inputs:
      rootFolderOrFile: '${{ variables.installDir }}'
      archiveType: 'zip'
      archiveFile: '${{ variables.archiveFilePath }}'
      replaceExistingArchive: true

  - task: GitHubRelease@1
    displayName: 'Publish package to GitHub'
    inputs:
      gitHubConnection: 'PavelKisliak'
      repositoryName: '$(Build.Repository.Name)'
      action: 'edit'
      isDraft: true
      target: '$(Build.SourceVersion)'
      tag: $(Build.SourceBranchName)
      tagSource: 'userSpecifiedTag'
      title: '$(Build.SourceBranchName)'
      addChangeLog: false
      assets: '${{ variables.archiveFilePath }}'
      assetUploadMode: 'replace'
