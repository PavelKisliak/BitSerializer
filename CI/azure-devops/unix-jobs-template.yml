parameters:
# [Required] Job name
  name: ''
# [Required] Build agent name
  image: ''
# [Optional] Install additional tools command line
  installToolsCmd: ''
# [Required] URL to download the compiler
  compilerUrl: ''
# [Optional] Directory with cached packages
  vcpkgCacheDir: /home/vsts/.cache/vcpkg/archives/
# [Required] VCPKG triplet
  vcpkgTriplet: ''
# [Optional] Cmake additional arguments for CMake generate mode
  cmakeGenArgs: ''
# [Optional] Enable build Debug version
  enableDebugBuild: false

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.image }}

  steps:
  - script: |
      echo --- Install build tools ---
      ${{ parameters.installToolsCmd }}
    displayName: 'Install build tools'
    condition: ne('${{ parameters.installToolsCmd }}', '')

  - script: |
      echo --- Download compiler ---
      wget -nv ${{ parameters.compilerUrl }} -O compiler.tar.xz
      echo --- Extract compiler ---
      sudo tar -xf compiler.tar.xz -C /usr/
    displayName: 'Install compiler'
    condition: ne('${{ parameters.compilerUrl }}', '')

  - script: |
      echo --- Clone latest VCPKG ---
      cd ..
      git clone --progress -v "https://github.com/Microsoft/vcpkg.git"
      echo --- VCPKG: Bootstrap ---
      cd vcpkg
      ./bootstrap-vcpkg.sh
    displayName: 'Install VCPKG'

  - task: Cache@2
    inputs:
      key: |
        vcpkg | v6 | ${{ parameters.name }} | $(Build.SourcesDirectory)/vcpkg.json
      restoreKeys: |
        vcpkg | v6 | ${{ parameters.name }}
      path: ${{ parameters.vcpkgCacheDir }}
      cacheHitVar: VCPKG_CACHE_RESTORED
    displayName: Configure cache of VCPKG packages

  - script: |
      mkdir build.debug
      mkdir build.release
      cmake --version
    displayName: Make Build directories

  - task: CMake@1
    inputs:
      workingDirectory: 'build.debug'
      cmakeArgs: '${{ parameters.cmakeGenArgs }} -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/../vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} .. -G Ninja'
    displayName: 'Cmake - generate debug'
    condition: eq('${{ parameters.enableDebugBuild }}', true)

  - script: |
      cd build.debug
      cmake --build .
    displayName: 'Build [Debug]'
    condition: eq('${{ parameters.enableDebugBuild }}', true)

  - script: |
      cd build.debug
      ctest -C Debug -T test --output-on-failure
    displayName: 'Run tests [Debug]'
    continueOnError: true
    condition: eq('${{ parameters.enableDebugBuild }}', true)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Testing/**/Test.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)/build.debug'
      testRunTitle: '${{ parameters.name }} [Debug]'
      buildPlatform: 'x64'
      buildConfiguration: 'Debug'
    displayName: 'Publish Test results [Debug]'
    condition: eq('${{ parameters.enableDebugBuild }}', true)

  - task: CMake@1
    inputs:
      workingDirectory: 'build.release'
      cmakeArgs: '${{ parameters.cmakeGenArgs }} -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/../vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ parameters.vcpkgTriplet }} .. -G Ninja'
    displayName: 'Cmake - generate release'

  - script: |
      cd build.release
      ninja
    displayName: 'Build [Release]'

  - script: |
      cd build.release
      ctest -C Release -T test --output-on-failure
    displayName: 'Run tests [Release]'
    continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Testing/**/Test.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)/build.release'
      testRunTitle: '${{ parameters.name }} [Release]'
      buildPlatform: 'x64'
      buildConfiguration: 'Release'
    displayName: 'Publish Test results [Release]'
