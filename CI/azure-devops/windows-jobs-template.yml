parameters:
# [Required] Job name
  name: ''
# [Required] Build agent name
  image: ''
# [Optional] Platform [x64, win32]
  platform: 'x64'
# [Required] VCPKG triplet
  vcpkgTriplet: 'x64-windows-release'
# [Optional] Cmake additional arguments for CMake generate mode
  cmakeGenArgs: ''
# [Optional] Build configuration (Debug, Release)
  buildConfiguration: 'Release'
# [Optional] Enable run tests
  enableRunTests: true
# [Optional] Publish artifacts to a GitHub Release
  enablePublishToGitHub: false
# [Optional] Package suffix
  packageSuffix: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.image }}
  variables:
    buildDirectory: 'build'
    installDir: '$(Build.ArtifactStagingDirectory)/install/bitserializer-$(Build.SourceBranchName)'
    archiveFilePath: '$(Build.ArtifactStagingDirectory)/install/bitserializer_$(Build.SourceBranchName)${{ parameters.packageSuffix }}.zip'

  steps:
  - script: |
      echo --- Clone latest VCPKG ---
      cd ..
      git clone --progress -v "https://github.com/Microsoft/vcpkg.git"
      echo --- VCPKG: Bootstrap ---
      cd vcpkg
      bootstrap-vcpkg
    displayName: 'Install VCPKG'
    
  - task: Cache@2
    displayName: Configure cache of VCPKG packages
    inputs:
      key: |
        vcpkg | v10 | ${{ parameters.name }} | $(Build.SourcesDirectory)/vcpkg.json
      restoreKeys: |
        vcpkg | v10 | ${{ parameters.name }}
      path: ${{ variables.buildDirectory }}/vcpkg_installed/
      cacheHitVar: VCPKG_CACHE_RESTORED

  - task: CMake@1
    displayName: 'Cmake - generate [${{ parameters.buildConfiguration }}]'
    inputs:
      workingDirectory: '${{ variables.buildDirectory }}'
      cmakeArgs: '-A ${{ parameters.platform }} ${{ parameters.cmakeGenArgs }} -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/../vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX:PATH=${{ variables.installDir }} ..'

  - script: |
      cd ${{ variables.buildDirectory }}
      cmake --build . --config ${{ parameters.buildConfiguration }} --parallel
    displayName: 'Build [${{ parameters.buildConfiguration }}]'
    
  - script: |
      cd ${{ variables.buildDirectory }}
      ctest -C ${{ parameters.buildConfiguration }} -T test --output-on-failure -j2
    displayName: 'Run tests'
    continueOnError: true
    condition: and(succeeded(), eq('${{ parameters.enableRunTests }}', true))

  - task: PublishTestResults@2
    displayName: 'Publish Test results'
    condition: and(succeeded(), eq('${{ parameters.enableRunTests }}', true))
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Testing/**/Test.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)/${{ parameters.buildDirectory }}'
      testRunTitle: '${{ parameters.name }} [${{ parameters.buildConfiguration }}]'
      buildPlatform: '${{ parameters.platform }}'
      buildConfiguration: '${{ parameters.buildConfiguration }}'

  - script: |
      cd ${{ variables.buildDirectory }}
      cmake --build . --config ${{ parameters.buildConfiguration }} --target install
    condition: and(succeeded(), eq('${{ parameters.enablePublishToGitHub }}', true))
    displayName: 'Cmake - install [${{ parameters.buildConfiguration }}]'

  - task: ArchiveFiles@2
    displayName: Zip package
    condition: and(succeeded(), eq('${{ parameters.enablePublishToGitHub }}', true))
    inputs:
      rootFolderOrFile: '${{ variables.installDir }}'
      archiveType: 'zip'
      archiveFile: '${{ variables.archiveFilePath }}'
      replaceExistingArchive: true

  - task: GitHubRelease@1
    displayName: 'Publish package to GitHub'
    condition: and(succeeded(), eq('${{ parameters.enablePublishToGitHub }}', true))
    inputs:
      gitHubConnection: 'PavelKisliak'
      repositoryName: '$(Build.Repository.Name)'
      action: 'edit'
      isDraft: true
      target: '$(Build.SourceVersion)'
      tag: $(Build.SourceBranchName)
      tagSource: 'userSpecifiedTag'
      title: '$(Build.SourceBranchName)'
      addChangeLog: false
      assets: '${{ variables.archiveFilePath }}'
      assetUploadMode: 'replace'
