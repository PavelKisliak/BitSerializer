// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define REGISTER_ENUM(enumType, ...) namespace { static const bool registration_##enumType = ::BitSerializer::Convert::Detail::EnumRegistry<enumType>::Register(__VA_ARGS__); }
#define DECLARE_ENUM_STREAM_OPS(enum2Type) template <typename TSym> std::basic_ostream<TSym, std::char_traits<TSym>>& operator<<(std::basic_ostream<TSym, std::char_traits<TSym>>& stream, enum2Type value) { std::basic_string<TSym, std::char_traits<TSym>> str; BitSerializer::Convert::Detail::EnumRegistry<enum2Type>::ToString(value, str); return stream << str; } template <class TSym, class TTraits = std::char_traits<TSym>> std::basic_istream<TSym, TTraits>& operator>>(std::basic_istream<TSym, TTraits>& stream, enum2Type& value) { TSym sym; std::basic_string<TSym, TTraits> str; for (stream >> sym; !stream.eof() && !std::isspace(sym); sym = stream.get()) { str.push_back(sym); } BitSerializer::Convert::Detail::EnumRegistry<enum2Type>::FromString(std::basic_string_view<TSym>(str), value); return stream; }
